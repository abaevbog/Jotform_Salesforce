{"version":3,"sources":["components/auth.js","components/leadInput.js","components/lead_row.js","components/grid.js","App.js","serviceWorker.js","index.js"],"names":["Auth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","password","failedLogin","handleClick","bind","assertThisInitialized","handleChange","handleKeyDown","that","$","ajax","url","method","data","JSON","stringify","Value","Verif","success","result","setPassword","setState","error","err","event","target","value","key","_this2","react_default","a","createElement","className","placeholder","onChange","onKeyDown","Button","onClick","Component","Input","input","results","loading","querySalesForce","sendLeadsBack","console","log","records","setLeads","response","parse","LeadRow","selected","email","sendEmail","found","ReactDOM","findDOMNode","parentNode","childNodes","textContent","setSelectedEmail","selectedEmail","scope","name","address","Grid","leads","rows","leadClick","lst","forEach","lead","addr","push","lead_row","window","JFCustomWidget","subscribe","msg","valid","sendSubmit","newEmail","_this3","i","Row","id","backToSearch","App","page","receivedLeads","auth","leadInput","grid","Boolean","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1dcaf5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport $ from 'jquery';\n\nclass Auth extends Component {\n\nconstructor(props) {\n    super(props);\n    this.state = {password: \"\", failedLogin:false};\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleClick(that,props){\n    $.ajax({\n      url: \"https://zlf1wgdua9.execute-api.us-east-1.amazonaws.com/jotform/jotformproxy\",\n      method: 'POST',\n      data: JSON.stringify({ 'Value': '!', \"Verif\": this.state.password}),\n      success: function (result) {\n        if (result == \"Authorized\"){\n          that.props.setPassword(that.state.password);\n        } else {\n          that.setState({failedLogin:true});\n        }\n      },\n      error: function(err){\n        that.setState({failedLogin:true});\n      } \n    });\n}\n\nhandleChange(event) {\n  this.setState({password: event.target.value});\n}\n\nhandleKeyDown(event){\n  if (event.key === 'Enter') {\n    this.handleClick(this);\n  }\n}\n\nrender() {\n    return (\n        \n    <div className=\"container\">\n        {this.state.failedLogin? <div className=\"row\">\n            <div className=\"col align-self-center\">\n                 Login failed\n            </div>\n        </div> :null }\n        <div className=\"row\">\n            <div className=\"col-sm-2\">Password:</div>\n            <div className=\"col-sm-10\">\n                <input className=\"input\" placeholder=\"case sensitive\" onChange={this.handleChange} onKeyDown={this.handleKeyDown} ></input>\n            </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col align-self-center\">\n            <div className=\"buttons\">\n                <Button onClick={() => this.handleClick(this)}>Authorise</Button>\n            </div>\n          </div>\n        </div>    \n    </div>\n    );\n}\n\n}\nexport default Auth;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n\nclass Input extends Component {\n\nconstructor(props) {\n    super(props);\n    this.state = { password: props.password,input:\"\",results:[], loading:false};\n    this.handleChange = this.handleChange.bind(this);\n    this.querySalesForce = this.querySalesForce.bind(this);\n    this.sendLeadsBack = this.sendLeadsBack.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n}\n\nhandleChange(event) {\n    console.log(event.target.value);\n    this.setState({input: event.target.value});\n}\n\nsendLeadsBack(records){\n    this.props.setLeads(records);\n}\n\nhandleKeyDown(event){\n    if (event.key === 'Enter') {\n        this.querySalesForce(this);\n    }\n  }\n\n\n    \nquerySalesForce(that) {\n    that.setState({loading:true});\n    $.ajax({\n        url: \"https://zlf1wgdua9.execute-api.us-east-1.amazonaws.com/jotform/jotformproxy\",\n        method: 'POST',\n        data: JSON.stringify({ 'Value': this.state.input, \"Verif\": this.state.password }),\n        success: function (response) {\n            console.log(response);\n            var data = JSON.parse(response);\n            var records = JSON.parse(data).records;\n            that.sendLeadsBack(records);\n        }\n    }\n    );\n}\n\nrender() {\n    return (\n    <div className=\"container\">\n        {this.state.loading? <div className=\"row\">\n            <div className=\"col align-self-center\">\n                 Loading lead ... \n            </div>\n        </div> :null }\n        <div className=\"row\">\n            <div className=\"col-sm-4\">Client's last name or email:</div>\n            <div className=\"col-sm-8\">\n                <input className=\"input\" onChange={this.handleChange} onKeyDown={this.handleKeyDown}></input>\n            </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col align-self-center\">\n            <div className=\"buttons\">\n                <Button onClick={() => this.querySalesForce(this)}>Search lead</Button>\n            </div>\n          </div>\n        </div>    \n    </div>\n    );\n}\n\n}\nexport default Input;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass LeadRow extends Component {\n    constructor(props){\n        super(props);\n    this.state = {selected:false, email: \"None\"};\n    this.sendEmail = this.sendEmail.bind(this);\n    }\n\n\n\n    sendEmail(event){\n        const found = ReactDOM.findDOMNode(event.target).parentNode.childNodes[1].textContent;\n        this.props.setSelectedEmail(found);\n    }\n\n\n\n\n    render() {\n        return (\n            <tr onClick={this.sendEmail} className={this.props.email == this.props.selectedEmail? \"selected\":\"\"}> \n                <th scope=\"row\">{this.props.name}</th>\n                <td>{this.props.email}</td>\n                <td>{this.props.address}</td>\n            </tr>\n        );\n    }\n\n}\nexport default LeadRow;","import React, { Component } from 'react';\nimport './lead_row';\nimport LeadRow from './lead_row';\nimport { Row , Button } from 'react-bootstrap';\nclass Grid extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {leads: props.leads, selected:null, rows: []};\n        this.setSelectedEmail = this.setSelectedEmail.bind(this);\n        this.leadClick = this.leadClick.bind(this);\n      }\n\n      leadClick(event){\n          console.log(\"LEAD CLICK\");\n        console.log(event.target);\n      }\n    \n    componentDidMount(){\n        var lst = [];\n        this.state.leads.forEach((lead) => {\n            var addr = lead[\"Address\"][\"street\"] + ',' + lead[\"Address\"][\"city\"] + ',' + lead[\"Address\"][\"state\"] + ',' + lead[\"Address\"][\"postalCode\"];\n            lst.push(<LeadRow key={lead[\"Email\"]} name={lead[\"Name\"]} email={lead[\"Email\"]} address={addr} setSelectedEmail={this.setSelectedEmail} selectedEmail={this.state.selected}> </LeadRow> )\n        });\n        this.setState({rows:lst});\n\n        window.JFCustomWidget.subscribe(\"submit\", function(){\n            var msg = {\n                //you should valid attribute to data for JotForm\n                //to be able to use youw widget as required\n                valid: true,\n                value: this.state.selected\n            }\n            // send value to JotForm\n            window.JFCustomWidget.sendSubmit(msg);\n        });\n    }  \n\n    setSelectedEmail(newEmail){\n        var lst = [];\n        for (var i =0;i<5;i++){\n            lst.push(<LeadRow name={\"SomeName\"} email={i+\"email@kuku.com\"} address={\"This address is suuper long like the longeder theins ever\"} setSelectedEmail={this.setSelectedEmail} selectedEmail={newEmail}> </LeadRow> )\n        }\n        this.state.leads.forEach((lead) => {\n            var addr = lead[\"Address\"][\"street\"] + ',' + lead[\"Address\"][\"city\"] + ',' + lead[\"Address\"][\"state\"] + ',' + lead[\"Address\"][\"postalCode\"];\n            lst.push(<LeadRow key={lead[\"Email\"]} name={lead[\"Name\"]} email={lead[\"Email\"]} address={addr} setSelectedEmail={this.setSelectedEmail} selectedEmail={newEmail}> </LeadRow> )\n        });\n        console.log(\"set email\");\n        this.setState({rows:lst,selected:newEmail});\n    }\n\n  \n\n    render() {\n        return (\n        <div className=\"container\">\n            <Row className=\"justify-content-md-center\" >\n                <div className=\"table-wrapper-scroll-y my-custom-scrollbar\">\n\n                    <table className=\"table table-bordered mb-0 \">\n                        <thead >\n                            <tr className=\"base\">\n                                <th scope=\"col-sm\">Name</th>\n                                <th scope=\"col\">Email</th>\n                                <th scope=\"col\">Address</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.rows}\n                        </tbody>\n                    </table>\n                </div>\n            </Row>\n            <Row className=\"justify-content-md-center\" >\n                <div className=\"col align-self-center\">\n                    <Button id=\"button\" onClick={this.props.backToSearch}>Go back to search</Button>\n                </div>\n            </Row>\n        </div>\n        );\n    }\n\n}\nexport default Grid;","import React, { Component } from 'react';\nimport './App.css';\nimport Auth from './components/auth';\nimport './components/leadInput.js';\nimport Input from './components/leadInput';\nimport Grid from './components/grid';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: null,\n      selectedEmail: null,\n      leads:[],\n      page:1,\n    }\n  \n    this.setPassword = this.setPassword.bind(this);\n    this.setLeads = this.setLeads.bind(this);\n    this.backToSearch = this.backToSearch.bind(this);\n  }\n\n\n  setPassword(password){\n    this.setState({password:password, page:2});\n    console.log(\"set password\");\n  }  \n\n  setLeads(receivedLeads){\n    this.setState({leads:receivedLeads, page:3});\n    console.log(receivedLeads);\n  }  \n\n  backToSearch(){\n    this.setState({page:2});\n  }\n\n \n\n  render() {\n    var page;\n    if (this.state.page == 1 ){\n      page = <Auth setPassword={this.setPassword}> </Auth>;\n    } else if (this.state.page == 2){\n      page = <Input password={this.state.password} setLeads={this.setLeads}></Input>;\n    } else {\n      page = <Grid leads={this.state.leads} backToSearch = {this.backToSearch}></Grid>\n    }\n    return (\n      <div className=\"App\">\n        <h2> Salesforce Lead Lookup</h2>\n        <Grid leads={this.state.leads} backToSearch = {this.backToSearch}></Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}